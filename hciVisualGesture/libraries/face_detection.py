#!/usr/bin/python3
"""
    This module contains functions to calculate the aspect ratios of both the eyes and the mouth.

    It also contains functions to detect the gestures generated by the eyes and mouth to enable/disable
    functions (for example mouse clicks).

    It also has a function to display information about detected gestures, radio aspects of eyes and mouth
    as well as 3D head pose estimation in the OpenCV output frame.
"""
import cv2
from libraries import face
from scipy.spatial import distance as dist
from playsound import playsound
from win10toast import ToastNotifier
from interface import soundsPath
from libraries import directories
import sys

toaster = ToastNotifier()

def eye_aspect_ratio(eye):  
    # Calculate euclidean distances between the reference points of (x, y)
    # Calculate the euclidean distance between two 1D matrices
    A = dist.euclidean(eye[1], eye[5]) # P2-P6 Vertical distance
    B = dist.euclidean(eye[2], eye[4]) # P3-P5 Vertical distance
    C = dist.euclidean(eye[0], eye[3]) # P1-P4 Horizontal distance

    # Calculate the eye aspect ratio ((P2-P6)+(P3-P5))/2*(P1-P4)
    ear = (A + B) / (2.0 * C)

    # Return the eye aspect ratio
    return ear

def mouth_aspect_ratio(mouth):  
    # Calculate euclidean distances between the reference points of (x, y)
    # Calculate the euclidean distance between two 1D matrices
    A = dist.euclidean(mouth[1], mouth[7]) # P2-P8 Vertical distance
    B = dist.euclidean(mouth[2], mouth[6]) # P3-P7 Vertical distance
    C = dist.euclidean(mouth[3], mouth[5]) # P4-P6 Vertical distance
    D = dist.euclidean(mouth[0], mouth[4]) # P1-P5 Horizontal distance

    # Calculate the mouth aspect ratio  ((P2-P8)+(P3-P7)+(P4-P6))/2*(P1-P5)
    mar = (A + B + C) / (2.0 * D)

    # Return the mouth aspect ratio
    return mar  

def eye_gestures_detection(ear, diff_ear, ear_left, ear_right):  
    face.TOTAL_LEFT
    face.TOTAL_RIGHT
    face.TOTAL_BOTH
    face.EYE_COUNTER
    face.WINK_COUNTER
    face.SCROLL_MODE    # Read from COFIG FILE (pending)
    face.LEFT_WINK      # Read from COFIG FILE (pending)
    face.RIGHT_WINK     # Read from COFIG FILE (pending)
    face.SHOW_PLOT

    # Check if the eye aspect ratio is below the blink threshold and
    # if so, increase the wink counter
    if diff_ear > face.WINK_AR_DIFF_THRESH:

        if ear_left < ear_right:
            if ear_left < face.EYE_AR_THRESH:
                face.WINK_COUNTER += 1
                if face.WINK_COUNTER > face.WINK_CONSECUTIVE_FRAMES:
                    face.LEFT_WINK = not face.LEFT_WINK
                    if face.LEFT_WINK:
                        notify("Right wink was detected")
                        playsound(soundsPath + 'MouseDoubleClick.wav')

                    face.WINK_COUNTER = 0
                    face.TOTAL_RIGHT += 1

        elif ear_left > ear_right:
            if ear_right < face.EYE_AR_THRESH:
                face.WINK_COUNTER += 1
                if face.WINK_COUNTER > face.WINK_CONSECUTIVE_FRAMES:
                    face.RIGHT_WINK = not face.RIGHT_WINK
                    if face.RIGHT_WINK:
                        notify("Left wink was detected")
                        playsound(soundsPath + 'MouseDoubleClick.wav')

                    face.WINK_COUNTER = 0
                    face.TOTAL_LEFT += 1
        else:
            face.WINK_COUNTER = 0

    else:
        if ear <= face.EYE_AR_THRESH:
            face.EYE_COUNTER += 1

            if face.EYE_COUNTER > face.EYE_AR_CONSECUTIVE_FRAMES:
                face.SCROLL_MODE = not face.SCROLL_MODE
                notify("Narrowed eyes was detected")

                #Disable, can be used in later features... for example:
                #if face.SCROLL_MODE:
                #    notify("Function enabled with narrowed eyes") # Scroll mov enabled
                #    playsound(soundsPath + 'entry_tone.wav')
                #else:
                #    notify("Function disabled with narrowed eyes") # Scroll mov disabled
                #    playsound(soundsPath + 'exit_tone.wav')

                face.EYE_COUNTER = 0
                face.TOTAL_BOTH += 1
        else:
            face.EYE_COUNTER = 0
            face.WINK_COUNTER = 0

def mouth_gestures_detection(mar):
    face.TOTAL_MOUTH
    face.MOUTH_COUNTER
    face.MOVE_MOUSE # Read from COFIG FILE (pending)

    # Check if the mouth aspect ratio is below the threshold and
    # if so, increase the mouth counter
    if mar > face.MOUTH_AR_THRESH:
        face.MOUTH_COUNTER += 1
        if face.MOUTH_COUNTER >= face.MOUTH_AR_CONSECUTIVE_FRAMES:
            face.MOVE_MOUSE = not face.MOVE_MOUSE
            notify("Open mouth, now the application will be closed.")
            #print('open mouth')
            # Close application
            playsound(soundsPath + 'exit_tone.wav')
            directories.closeApp()
            exit()

            #Disable, can be used in later features, for example:
            #if face.MOVE_MOUSE:
            #    notify("Function enabled with open mouth") # Mouse mov enabled
            #    playsound(soundsPath + 'entry_tone.wav')
            #else:
            #    notify("Function disabled with open mouth") # Mouse mov disabled
            #    playsound(soundsPath + 'exit_tone.wav')

            face.TOTAL_MOUTH += 1
            face.MOUTH_COUNTER = 0
    else:
        face.MOUTH_COUNTER = 0

def notify(message):
    toaster.show_toast("Facial gesture interface", message,duration=2, threaded=True)

def showDetectionInfo(image, earLeft, earRight, marMouth, headPos):
    cv2.putText(image, "E.A.R. Left : {:.2f}".format(earLeft), (120, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "E.A.R. Right: {:.2f}".format(earRight), (120, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "M.A.R: {:.2f}".format(marMouth), (120, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "Wink Left : {}".format(face.TOTAL_LEFT), (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "Wink Right: {}".format(face.TOTAL_RIGHT), (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "Narrowed Eyes: {}".format(face.TOTAL_BOTH), (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "Mouth: {}".format(face.TOTAL_MOUTH), (10, 80), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), 1)
    cv2.putText(image, "Y: " + "{:0.2f}".format(headPos[0, 0]*-1), (230, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), thickness=1)
    cv2.putText(image, "X: " + "{:0.2f}".format(headPos[1, 0]*-1), (230, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), thickness=1)
    cv2.putText(image, "Z: " + "{:0.2f}".format(headPos[2, 0]), (230, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 0), thickness=1)    
